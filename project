Title: Writing a Purely Functional Shader Language which Compiles to SPIR-V

Abstract:
The most prominent high-level shader language currently is GLSL, a C-like procedural language. GLSL suffers from a weak type system, allowing invalid operations that could easily be prevented at compile time - this results in runtime errors (or often no errors at all). Runtime errors make the behaviour of software difficult to reason about, and make debugging harder. To resolve this problem, this paper describes the development of a purely functional language, aiming to be a drop in replacement for GLSL. It will compile down to SPIR-V, an intermediate shader program representation.


Aims:
 - drop in replacement for GLSL, low cost abstractions (ideally 0!)

Details:
 - pure, functional shader language
 - compiles to SPIR-V
 - module system
 - debugging abilities:
   - CPU runnable backend 
   - program annotations that will communicate the value of certain variables in the program. (e.g. colour is darker than expected, and is calculated by a + b + c. Inspect the values of a, b, c during a run of the program using these program annotations.) Communication back to the CPU is difficult though (compute shader features?)?? Might only have to implement this for the CPU based backend.
 - Dependent types?
