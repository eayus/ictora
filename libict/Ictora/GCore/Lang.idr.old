module Ictora.GCore.Lang

import public Ictora.GCore.Type
import Data.List
import Data.Vect
import Ictora.Util

%access public export

Identifier : Type
Identifier = String

data GLiteral = GLInt Int | GLBool Bool | GLFloat Double

mutual
    data GPrimitiveOp
        = GAdd GExpr GExpr
        | GFAdd GExpr GExpr
        | GSub GExpr GExpr
        | GFSub GExpr GExpr
        | GNot GExpr

    data GExpr
        = GLit GLiteral
        | GVar Identifier
        | GFuncCall Identifier (List GExpr) GExprType 
        | GIf GExpr GExpr GExpr GExprType
        | GPrimOp GPrimitiveOp
        | GLet Identifier GExpr GExpr


record GFunction where
    constructor MkGFunction
    type : GFuncType
    name : Identifier
    params : List Identifier
    body : GExpr

funcHasName : String -> GFunction -> Bool
funcHasName s func = s == (GFunction.name func)


record GProgram where
    constructor MkGProgram
    funcs : (len : Nat ** Vect len GFunction)
    vertEntry : Found (funcHasName "vert") funcs
    fragEntry : Found (funcHasName "frag") funcs

{--GProgram : Type
GProgram = (funcs : List GFunction ** vert : Found (funcHasName "vert") funcs ** Found (funcHasName "frag") funcs)


testProg : GProgram
testProg = ([ MkGFunction (MkGFuncType GTBool []) "vert" [] (GLit (GLBool True)) 
, MkGFunction (MkGFuncType GTInt []) "frag" [] (GLit (GLInt 9)) ] ** Here ** There Here)--}

testProg : GProgram
testProg = MkGProgram 
               (2 ** [ MkGFunction (MkGFuncType GTBool []) "vert" [] (GLit (GLBool True)) 
               , MkGFunction (MkGFuncType GTInt []) "frag" [] (GLit (GLInt 9)) ])
               (Here)
               (There Here)
