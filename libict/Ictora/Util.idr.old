module Ictora.Util

import Data.Vect
import Data.Fin

%access public export

{--fromJust : Maybe a -> a
fromJust (Just a) = a

lookupPred : (a -> Bool) -> List (a, b) -> Maybe b
lookupPred p [] = Nothing
lookupPred p ((x, y) :: xs) = if p x then Just y else lookupPred p xs

lookupPredJust : (a -> Bool) -> List (a, b) -> b
lookupPredJust p xs = fromJust $ lookupPred p xs--}



{--data Found : {a : Type} -> (a -> Bool) -> (len : Nat ** Vect len a) -> Type where
    Here : {a : Type}
        -> {x : a}
        -> {auto p : f x = True}
        -> {len : Nat}
        -> {xs : Vect len a}
        -> Found f (succ len ** x :: xs)

    There : Found f (len ** xs) -> Found f (succ len ** x :: xs)

{--getFound : Found {a} f xs -> a
getFound (Here {x}) = x
getFound (There later) = getFound later--}

foundIndex : Found f (len ** xs) -> Fin len
foundIndex (Here {len = Z}) = FZ
foundIndex (Here {len = (S n)}) = FS FZ
foundIndex (There later) = FS (foundIndex later)--}
