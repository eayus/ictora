Title : A Safe, Debuggable, Purely Functional Shader Language

Name : Ictora

Features :
	HIGH PRIO:
	- Compiles to SPIR-V (so compatible with most major low-level graphics APIs)
	- Strong type system (catch errors at compile time)
	- Enforces compatibility between fragment and vertex shaders

	MEDIUM PRIO:
	- Module system enabling code reuse between shaders
	- CPU backend (mainly for debugging purposes)

	LOW PRIO:
	- Debugging annotations, allowing tracking of variables during execution
	- Package database (Hackage / crates.io)
	- Syntax highlighting for VIM and other IDEs
	- Dependent types, or just type level constant values (not very feasible)

Why :
	- Existing languages (GLSL / HLSL) are difficult to debug
	- Full blown frameworks are incompatible with existing codebases
	- Very few existing purely functional shader langauges

Timetable :
	1) Refine language semantics
	2) Design a syntax
	3) Implement parser
	4) Simple type system
	5) Simple interpreter
	6) Refine type system
	7) SPIR-V codegen
	8) Refine interpreter
	9) CPU codegen
	10) Implement debugging annotations

Implementation Details :
	- Written in Haskell
	- Parser implemented using MegaParsec
	- ML-like type system?
	- CPU backend will use GRIN compiler backend

Potential Issues :
	- SPIR-V codegen is difficult due to lack of examples.
	  Unlikely since the specification is extremely well documented, but if this
	  was an issue then ot could be resolved by: compiling to GLSL, then using
	  the existing GLSL to SPIR-V compiler.

	- Inefficient codegen.
	  A fundamental feature of functional programming is case analysis (pattern
	  matching) - even the simplest of functions rely on this. Unfortunately this
	  doesn't mesh particularly well with the GPU, which has extremely bad
	  performance on code with significant branching. Applying optimisations to
	  remove the branching could be difficult. The saving grace is that bad
	  performance, while annoying, doesn't prevent the language from acheiving
	  the core requirements.

	- <LOW PRIO item> could not be completed due to time constraints.
	  This isn't really an issue, the "LOW PRIO" features are basically extensions
	  in the case that there is spare time.

Personal Notes / Thoughts :
	- Planning to prototype this over the summer (mainly focusing on the type system)
	- Aiming for this to be genuinely useful, so will focus on a complete basic
	  language before moving onto extras.
	- However, there is lots of room for extension if the core requirements get
	  completed quickly.
	- The language will be very standard for a purely functional language aside from
	  a few domain specific features. The aim is not to create a revolutionary new
	  type system or anything, but rather to apply existing, well-established ideas
	  to the domain of graphics programming.
	- Not 100% about the name of the language, seems ok but might think of something
	  better. (TODO: ask for the opinions of friends etc.)
